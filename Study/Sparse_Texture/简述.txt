------------------ Feature --------------------
enabledFeatures	sparseBinding
enabledFeatures	sparseResidencyImage2D

------------------
准备虚纹理	根据大小，判断 mip数量
创建 Image	大小，mip等级 
创建 Image	不分配内存
创建 Image	image create flags: VK_IMAGE_CREATE_SPARSE_BINDING_BIT|VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT
设定Image-Layout	此时还没有分配内存

获取内存大小-属性		检查需要多少的内存，内存类型		
获取内存大小-属性		page/粒度 128,  RGBA, 128*128*4  		Page需要65,536 字节大小
获取内存大小-属性		根据总内存大小，计算虚纹理的page总数量， 	4096 是1366， 包括一个mip-tail
获取mip-tail内存 属性	粒度, mip-tail的第一个lod等级

Page划分		将每一 层/Layer，每一个大于mip-tail的Mip等级 
		划分为Page对象，并记录Offset,mip-level,layer 和 根据添加顺序得到的index
Page划分		虚纹理保存这些 Page对象

mip-tail		每一层划分完之后，会产生一个mip-tail, 放到 opaqueMemory中
mip-tail		只有一个的话，可以分配内存

queue		提前绑定 page的内存分配信息到 queue
----------------------------------------------------------------
正常创建		Sampler 和 ImageView

------------------- Page ----------------------
分配内存		分配一个Page大小的内存，并设定 VkSparseIamgeMemoryBind 中的 Offset,mip-level, layer信息
是否已经加载	根据内存是否已经分配，判定

------------------ 内存关联 --------------
一般的 Image 纹理	创建Image对象	检查内存大小需求	分配内存,绑定内存到 Image	
一般的 Image 纹理	加载到stagingBuffer 	拷贝到 Image (vkCmdCopyBufferToImage)

虚拟纹理	创建Image对象	有大小,mip等级数据	 不分配内存
虚拟纹理	为一个/多个Page分配内存	更新绑定信息,VkSparseImageMemoryBind:
				基础块信息: layer, mipLevel, Offset3D,Extent3D
				内存，内存偏移?	
				推送到绑定队列 vkQueueBindSparse
虚拟纹理	更新虚表		

虚拟纹理	加载Page页	包含layer, mipLevel, VkOffset3D:offset, VkExtent:extent
虚拟纹理	加载Page页	只关联 纹理的一块区域，也就是一个   Page
虚拟纹理	物理内存可能不是连续的 ？

----------------- 虚表 --------------------------
对应 VkBindSparseInfo ?	加载，卸载

---------------- Shader 采样 ------------------
UV	世界坐标空间	转换到 0-1
采样	采样并同时判定是否已经加载
-------------------------------------------------
firstMipmapInTail
https://developer.apple.com/documentation/metal/mtltexture/3043999-firstmipmapintail

mip-tail	所有大于一个lod 等级的 mip, 可以放到一个 page内的 mip
	假定page 128，tail 从64开始计算

比如粒度	虚拟纹理是 4096, 粒度 是128
	那么tail 就从 128的一般开始，对应等级 是 6
	4096	0
	2048	1
	1024	2
	512	3
	256	4
	128	5
	64	6	mip tail的开始

