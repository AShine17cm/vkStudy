geometry-shader实现 单个Pass 多光源阴影，

1. PhysicalDevicesFeature.geometryShader     创建 Logical Device时，将其 设为 true
2. SHADER_STAGE_GEOMETRY_BIT:
   PushConstantRange 需要包含 , 因为统一用 Scene.h 来做了几何体的渲染
   相关的 DescriptorSetLayout 也需要设置

3. 使用一个大的 UBO对象，包括 灯光数组，相机， 用以简化 代码,UBO，shader的管理
4. Geometry-Shader 对三角面 运行多次，将不同光源空间的 gl_Position 输出到 FrameBuffer不同的层
5. Layers:  
   5.1 ImageVIew 阴影使用的此资源需要设定 layers
   5.2 Frame-Buffer 与渲染阴影的RenderPass 绑定的此资源， 需要设定layers  (如果FrameBuffer 没有设定layers, geometry-shader 会输出到第一层,  如果Layers大于 ImageView的layers  会直接崩掉)

6. 通过 Scene.h 输出单个层的数据，或者将3个层合并到RGB通道
7. 使用 include将阴影相关的 shader代码 放到单独的文件中

操作
   
   使用数字键 1 来循环切换 （用于展示 单个层的阴影，多个层的阴影 ，shader 中有一个 ivec4 的调试数据）


其它-BUG
1. MessageID = 0xb6cf33fe | Number of elements inside builtin block differ between stages
   在vertex-shader中使用了gl_PerVertex来包含 gl_Position, 然后在Geometry-Shader中使用 gl_in[0].gl_Position导致的

2.pipeline-layout  <等位>遗传，如果<等位>上的资源不匹配，就会报错，
  (API无法判定shader中的if条件，即使实际上没有使用这个<等位>上的资源)
  比如 遗留的 set=1,binding=0 是上一个ground的tex,  而当前UI的 set=1,binding=0 需要的是 2d-array
  报出来的错误对象 是ground的tex

其它-不重要
1. 用于阴影生成的 Pipeline 即使没有 frag.shader 也可以正常工作
2. 去掉了 instancing, 为了简化代码

